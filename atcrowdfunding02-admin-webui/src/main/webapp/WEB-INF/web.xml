<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    
    <welcome-file-list>
        <welcome-file>/admin/to/login/page.html</welcome-file>
    </welcome-file-list>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!--Servlet默认生命周期中，创建对象是在第一次接收到请求时-->
        <!--而DispatcherServlet创建对象后有大量的“框架初始化工作”，不适合在第一次请求时来做-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!--url-pattern：第一种配置方式中的/表示的是拦截所有的请求-->
        <!--<url-pattern>/</url-pattern>-->

        <!--url-pattern：
            第二种配置方式配置请求扩展名
            好处：
            1、能够让静态资源完全不经过SpringMVC，不需要经过特殊处理
            2、可以实现伪静态效果：也就是表面看起来访问的是HTML文件这样的静态资源，但是实际上是经过Java代码运算的结果
                伪静态效果：1）给黑客入侵增加难度
                           2）利于SEO的优化（让百度谷歌这样的搜索引擎更容易找到我们的项目）
            缺点：
            1、不符合restFul风格
        -->
        <url-pattern>*.html</url-pattern>
        <!--为什么要另外配置json扩展名呢？-->
        <!--如果一个ajax请求扩展名是html，但是实际服务器给浏览器返回的还是json数据，二者就不匹配了，就会出现406的错误-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>


</web-app>
